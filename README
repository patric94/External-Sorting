			Εργασία 2 στο μάθημα "Υλοποίηση Συστημάτων Βάσεων Δεδομένων"
			
Αργυρός Γιάννης		1115201200009
Γιαννούδης Αστέριος	1115201200025

Η εργασία αντιμετωπίστηκε με τις παρακάτω παραδοχές:

	Κατά τη φάση της εσωτερικής ταξινόμησης δημιουργούμε Χ αρχεία ενός block (όπου Χ τα block του αρχείου με τις αταξινόμητες εγγραφές).
	Χρησιμοποιούμε buffer στη μνήμη μεγέθους BLOCK_SIZE/sizeof(Record) για να ταξινομήσουμε εσωτερικά τις εγγραφές στο κάθε αρχείο.
	Αντίστοιχα, κατά τη συγχώνευση, στη μνήμη μπαίνουν μόνο οι δύο εγγραφές που συγκρίνονται εκείνη τη στιγμή.
	Τα προσωρινά αρχεία που δημιουργούνται δεν είναι τύπου sorted οπότε δεν περιέχουν info block. Μόνο εγγραφές.
	Μόλις φτιαχτεί το τελικό προσωρινό αρχείο, δημιουργόυμε ένα παρόμοιο αρχείο τύπου sorted, με info block δηλαδή, και αντιγράφουμε όλες τις εγγραφές εκεί.
	Χρησιμοποιήσαμε τη global μεταβλητή mergedRecs για να μετράμε τις εγγραφές που έχουν συγχωνευτεί κάθε στιγμή στα εκάστοτε αρχεία προς συγχώνευση. Το κάναμε αυτό για να απλοποιήσουμε την λειτουργία της Sorted_InsertEntry χωρίς να αλλάξουμε τα ορίσματα που είχε το πρωτότυπο της συνάρτησης.
	Παρέχεται δυνατότητα για αύξουσα και φθίνουσα ταξινόμηση μέσω της μεταβλητής mode στη συνάρτηση Sorted_SortFile. mode = 1 -> αύξουσα και mode = 2 -> φθίνουσα.
	Στην ταξινόμηση με πεδίο χαρακτήρων (name,surname,city) όταν υπάρχει ισότητα στο πεδίο ταξινόμησης τότε γίνεται έλεγχος με τα id.
	Η συνάρτηση Sorted_checkSortedFile ελέγχει ανά δύο όλες τις εγγραφές του αρχείου για να δει αν είναι ταξινομημένες με το mode που παίρνει μέσα από το info block.
	H Sorted_GetAllEntries εκτελεί binary search. Όταν το αρχείο είναι ταξινομημένο με name,surname,city τότε γίνεται σειριακή προσπέλαση προς τις προηγούμενες και προς τις επόμενες εγγραφές από εκείνη που εντόπισε ο αλγόριθμος αναζήτησης για να βρεθούνε όλες αυτές που ζητήθηκαν.